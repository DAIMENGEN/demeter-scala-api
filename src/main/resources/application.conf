database {
  release {
    profile = "slick.jdbc.MySQLProfile$"
    db {
      dataSourceClass = "slick.jdbc.DriverDataSource"
      properties = {
        driver = "com.mysql.cj.jdbc.Driver"
        url = "jdbc:mysql://10.150.117.242:59591/demeter"
        user = root
        password = "c%4B3R/d"
      }
      numThreads = 10
      maxConnections = 10
    }
  }

  develop {
    profile = "slick.jdbc.MySQLProfile$"
    db {
      dataSourceClass = "slick.jdbc.DriverDataSource"
      properties = {
        driver = "com.mysql.cj.jdbc.Driver"
        url = "jdbc:mysql://127.0.0.1:3306/demeter"
        user = root
        password = "root"
      }
      numThreads = 10
      maxConnections = 10
    }
  }
}

akka.http {
  #jwt
  jwt {
    # Enables or disables the JWT signature validation.
    # This is useful for development and testing purposes
    # where you can still assert presence of claims without using a real signature.
    dev = off

    # The realm to use in the WWW-Authenticate header when a token is missing or invalid.
    realm = "akka-http-jwt"

    # Allows configuration for the JWT secrets used to verify tokens.
    # The list of supported algorithms is as follows:
    # - symmetric: HMD5, HS224, HS256, HS384 and HS512
    # - asymmetric: RS256, RS384, RS512, ES256, ES384, ES512 and Ed25519
    # Symmetric algorithms require either a secret in 'secret' or a filesystem path with a secret via 'secret-path', the former is ignored and the later takes precedence.
    # Asymmetric algorithms require a filesystem path for a public key via 'public-key'.
    #
    # An example config would be:
    # secrets: [
    #             {
    #               # The key-id is mandatory and should be unique for each secret.
    #               key-id: my-key-symmetric
    #               # The issuer is optional and can be used to validate the 'iss' claim.
    #               issuer: my-issuer
    #               algorithm: HS256
    #               # The secret can be set via an environment variable or loaded from a file.
    #               # To load the secret from an environment variables use:
    #               secret: ${MY_PRECIOUS_SECRET}
    #               # To load the secret from a file use (and remove the above secret setting):
    #               # secret-path: /path/to/secret.key
    #             },
    #             {
    #               key-id: my-key-asymmetric
    #               issuer: my-issuer
    #               algorithm: RS256
    #               # The public key used for JWT validation should be provided with the following setting:
    #               public-key: /path/to/public.key
    #             }
    #          ]
    #
    # NOTE: If configuring multiple secrets for the same algorithm, the first one found will be used
    # in cases where the Key Id ("kid") is not specified in the JWT token header.
    secrets: [
      {
        key-id: e5f0e8a4-ec8e-4b7e-b8e0-0f8e6f1f9b23
        issuer: demeter
        algorithm: HS256
        secret: "J8k$zL2!wR#9pFq7&nH4t@dB3^sX5mYj*2L8f#PzQ9eT!1kR4mN*eJ@6vD$yX3"
      }
    ]
  }
  #jwt

  # Configuration for the cors directive, does not apply unless the directive is used
  #cors
  cors {
    # Allow generic requests, that are outside the scope of the specification, for example lacking
    # an `Origin` header to pass through the directive.
    #
    # When false strict CORS filtering is applied and any invalid request will be rejected.
    allow-generic-http-requests = on

    # If enabled, the header `Access-Control-Allow-Credentials`
    # is included in the response, indicating that the actual request can include user credentials.
    # Examples of user credentials are: cookies, HTTP authentication or client-side certificates.
    allow-credentials = on

    #  List of origins that the CORS filter must allow.
    #
    # Can also be set to a single `*` to allow access to the resource from any origin.
    #
    # Controls the content of the `Access-Control-Allow-Origin` response header: if parameter is `*` and
    # credentials are not allowed, a `*` is returned in `Access-Control-Allow-Origin`. Otherwise, the origins given in the
    # `Origin` request header are echoed.
    #
    # Hostname starting with `*.` will match any sub-domain. The scheme and the port are always strictly matched.
    #
    # The actual or preflight request is rejected if any of the origins from the request is not allowed..
    allowed-origins = ["http://127.0.0.1:3000"]

    # Set of request headers that are allowed when making an actual request.
    #
    # Controls the content of the `Access-Control-Allow-Headers` header in a preflight response: If set to a single `*`,
    # the headers from `Access-Control-Request-Headers` are echoed. Otherwise specified list of header names is returned
    # as part of the header.
    allowed-headers = ["*"]

    # List of methods allowed when making an actual request. The listed headers are returned as part of the
    # `Access-Control-Allow-Methods` preflight response header.
    #
    # The preflight request will be rejected if the `Access-Control-Request-Method` header's method is not part of the
    # list.
    allowed-methods = ["GET", "PUT", "POST", "HEAD", "DELETE", "OPTIONS"]

    # Set of headers (other than simple response headers) that browsers are allowed to access. If not empty, the listed
    # headers are returned as part of the `Access-Control-Expose-Headers` header in responses.
    exposed-headers = []

    # The time the browser is allowed to cache the results of a preflight request. This value is
    # returned as part of the `Access-Control-Max-Age` preflight response header. If `scala.concurrent.duration.Duration.Zero`,
    # the header is not added to the preflight response.
    max-age = 1800 seconds
  }
  #cors
}


